- cache "commit_#{commit.id}_#{commit.updated_at.to_i}" do

  - introduced = fixed = []
  - state = commit.build_state

  %div{:class => "commit #{state}"}
    .info_part{:style => 'min-height: 90px;'}
      .avatar{:style => 'float: left; padding-right: 15px;'}
        = image_tag(commit.author.gravatar_url)
      .results{:style => 'float: right; text-align: right; padding-left: 10px'}
        %span{:class => state}= state.upcase
        %br
        - if state == 'preparation_failed'
          = link_to_longtext 'details', commit.project_instance_commits.where(:state => 'preparation_failed').first.preparation_log
        - elsif commit.prepared?
          = link_to 'prep log', '#'
        - else
          %i waiting for prepration
      %tt.title
        = link_to_p commit.description, :action => 'show', :id => commit.id
      (
      - if commit.repo_url
        = link_to commit.number[0..6], commit.repo_url
      - else
        = commit.number[0..6]
      )
      -# FIXME DEBUG
      = commit.id
      %br
      %br
      Author:
      %b= commit.author.name
      %br
      Time:
      %b
        = time_ago_in_words commit.committed_at
        ago
      %br

    - commit.test_suite_runs.finished.includes(:test_suite).includes(:project_instance).order('test_suites.created_at').group_by(&:test_suite).each do |ts, tsrs|
      - tsr = tsrs.first
      - prev_tsr = nil
      - # FIXME this is using only one parrent
      - prev_tsr = tsr.previous_run

      %b= "#{ts.name}:"
      - random_errors = tsr.random_errors
      = render :partial => 'test_suite_runs/summary', :locals => {:tsr => tsr}
      (
      = link_to_function 'details', "$('#run_details_#{commit.id}_#{ts.id}').show();"
      )
      %br

      %div{:id => "run_details_#{commit.id}_#{ts.id}", :style => "display: none;"}
        %br
        = render :partial => '/test_suite_runs/list', :locals => {:test_suite_runs => tsrs}

      - if prev = tsr.previous_run
        - prandom = tsr.possibly_random
        %ul.errors
          - new_errors = tsr.new_errors
          - (tsr.gone_errors - prandom).each do |tu|
            %li.green
              %span.green FIXED
              %b= tu.class_name
              = tu.name
          - (tsr.errors - prandom).each do |tu|
            %li
              - if new_errors.include? tu
                %span.red INTRODUCED
              - else
                %b FAILED
              %b= tu.class_name
              = tu.name
              %span.blame
                = link_to_function 'blame', "fetchBlame($(this),'#{tsr.id}','#{tu.id}');"
          - tsr.random_errors.each do |tu,probability|
            %li.warn
              %span.orange RANDOM (#{probability.round(2)*100}%)
              %b= tu.class_name
              = tu.name
          - (tsr.errors & (prandom - tsr.random_errors.map(&:first))).each do |tu|
            %li.warn
              %span.orange POSSIBLY RANDOM
              %b= tu.class_name
              = tu.name

