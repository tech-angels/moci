- cache "commit_#{commit.id}_#{commit.updated_at.to_i}" do

  - introduced = fixed = []
  - state = commit.build_state

  .hero-unit{:class => "commit #{state}"}
    .info_part
      .results.pull-right
        - if state == 'preparation_failed'
          = link_to_longtext 'details', commit.project_instance_commits.where(state: 'preparation_failed').first.try(:preparation_log)
        - elsif commit.prepared?
          = link_to_longtext 'Preparation log', commit.project_instance_commits.where(state: 'prepared').first.try(:preparation_log)
        - else
          %i waiting for preparation
        - if commit.repo_url
          = link_to image_tag("https://github.com/favicon.ico", class: "github-icon") + " View on github", commit.repo_url, class: "btn btn-small"
      %h2= link_to_p commit.description, [@project, commit]
      .row-fluid
        .span1
          .avatar
            = image_tag(commit.author.gravatar_url(size: 64), class: :thumbnail)
        .span11
          %dl.dl-horizontal
            %dt Author
            %dd= commit.author.name
            %dt Commited
            %dd #{time_ago_in_words commit.committed_at} ago
            %dt Commit ID
            %dd
              = link_to [commit.project, commit], class: 'btn btn-mini' do
                = commit.short_number
                %i.icon-circle-arrow-right
            %dt Status
            %dd= build_state_label(state)

    - commit.test_suite_runs.finished.includes(:test_suite).includes(:project_instance).order('test_suites.created_at').group_by(&:test_suite).each do |ts, tsrs|
      - tsr = tsrs.first
      - prev_tsr = nil
      - # FIXME this is using only one parrent
      - prev_tsr = tsr.previous_run

      %b= "#{ts.name}:"
      - random_errors = tsr.random_errors
      = render :partial => 'test_suite_runs/summary', :locals => {:tsr => tsr}
      (
      = link_to_function 'details', "$('#run_details_#{commit.id}_#{ts.id}').show();"
      )

      %div{:id => "run_details_#{commit.id}_#{ts.id}", :style => "display: none;"}
        = render :partial => '/test_suite_runs/list', :locals => {:test_suite_runs => tsrs}

      - if prev = tsr.previous_run
        - prandom = tsr.possibly_random
        %ul.errors.unstyled
          - new_errors = tsr.new_errors
          - (tsr.gone_errors - prandom).each do |tu|
            %li.green
              %span.green FIXED
              %b= tu.class_name
              = tu.name
          - (tsr.errors - prandom).each do |tu|
            %li
              - if new_errors.include? tu
                %span.label.label-important INTRODUCED
              - else
                %b.label.label-important FAILED
              %b= tu.class_name
              = tu.name
              %span.blame
                = link_to_function 'blame', "fetchBlame($(this),'#{tsr.id}','#{tu.id}');"
          - tsr.random_errors.each do |tu,probability|
            %li.warn
              %span.orange RANDOM (#{probability.round(2)*100}%)
              %b= tu.class_name
              = tu.name
          - (tsr.errors & (prandom - tsr.random_errors.map(&:first))).each do |tu|
            %li.warn
              %span.orange POSSIBLY RANDOM
              %b= tu.class_name
              = tu.name

