%h1 Latest commits


- @commits.each do |commit|
  %br
  - introduced = fixed = []
  - if tsr = commit.test_suite_runs.order('created_at DESC').first
    - if tsr.running?
      - state = 'running'
    - else
      - if tsr.clean?
        - state = 'clean'
      - else
        - state = 'bad'
  - else
    - state = 'pending'
  - if parent = commit.parent
    - if tsr && parent.test_suite_runs.first
      - parent_errors =  parent.test_suite_runs.first.test_unit_runs.with_error
      - my_errors = tsr.test_unit_runs.with_error
      - introduced = my_errors.map(&:test_unit) - parent_errors.map(&:test_unit)
      - fixed = parent_errors.map(&:test_unit) - my_errors.map(&:test_unit)
      - state = 'ok' if introduced.size == 0 && state == 'bad'

  %div{:class => "commit #{state}"}
    .info_part{:style => 'min-height: 90px;'}
      .avatar{:style => 'float: left; padding-right: 15px;'}
        = image_tag(commit.author.gravatar_url)
      .results{:style => 'float: right; text-align: right'}
        - case state
        - when 'pending'
          PENDING
        - when 'running'
          RUNNING
          -# TODO progress
        - when 'ok'
          %span.ok OK
        - when 'clean'
          %span.clean CLEAN
        - when 'bad'
          %span.bad BAD
        %br
        - if commit.prepared?
          = link_to 'prep log', '#'
        - else
          %i waiting for prepration
      %tt
        =commit.description
      (
      = commit.number[0..6]
      )
      -# FIXME DEBUG
      = commit.id
      %br
      %br
      Author:
      %b= commit.author.name
      %br
      Time:
      %b= time_ago_in_words commit.committed_at
      %br

    - commit.test_suite_runs.includes(:test_suite).group_by(&:test_suite).each do |ts, tsrs|
      %b= "#{ts.name}:"
      - tsr = tsrs.first
      %b= tsr.tests_count
      test,
      %b= tsr.assertions_count
      assertions,
      - if tsr.errors_count.to_i > 0
        %b= tsr.errors_count
        errors,
      - if tsr.failures_count.to_i > 0
        %b= tsr.failures_count
        failures
      (
      = raw tsrs.map { |tsr| link_to('log', :controller => :test_suite_runs, :action => :show, :id => tsr.id) }.join(',')
      )

      - if state == 'bad' || state == 'ok' || state == 'clean'
        %ul
          - fixed.each do |tu|
            %li.green
              = "[#{tu.class_name}]"
              = tu.name
              %span.green FIXED
          - tsr.test_unit_runs.with_error.all.each do |tur|
            %li
              = "[#{tur.test_unit.class_name}]"
              = tur.test_unit.name
              - if introduced.include? tur.test_unit
                %span.red INTRODUCED
              - else
                %b failed

